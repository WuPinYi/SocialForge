// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/WuPinYi/SocialForge/internal/ent/influencer"
	"github.com/WuPinYi/SocialForge/internal/ent/user"
)

// Influencer is the model entity for the Influencer schema.
type Influencer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID string `json:"account_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InfluencerQuery when eager-loading is set.
	Edges            InfluencerEdges `json:"edges"`
	user_influencers *string
	selectValues     sql.SelectValues
}

// InfluencerEdges holds the relations/edges for other nodes in the graph.
type InfluencerEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InfluencerEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e InfluencerEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Influencer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case influencer.FieldID, influencer.FieldName, influencer.FieldPlatform, influencer.FieldAccountID, influencer.FieldStatus:
			values[i] = new(sql.NullString)
		case influencer.FieldCreatedAt, influencer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case influencer.ForeignKeys[0]: // user_influencers
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Influencer fields.
func (i *Influencer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case influencer.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case influencer.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case influencer.FieldPlatform:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[j])
			} else if value.Valid {
				i.Platform = value.String
			}
		case influencer.FieldAccountID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[j])
			} else if value.Valid {
				i.AccountID = value.String
			}
		case influencer.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		case influencer.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case influencer.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case influencer.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_influencers", values[j])
			} else if value.Valid {
				i.user_influencers = new(string)
				*i.user_influencers = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Influencer.
// This includes values selected through modifiers, order, etc.
func (i *Influencer) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Influencer entity.
func (i *Influencer) QueryOwner() *UserQuery {
	return NewInfluencerClient(i.config).QueryOwner(i)
}

// QueryPosts queries the "posts" edge of the Influencer entity.
func (i *Influencer) QueryPosts() *PostQuery {
	return NewInfluencerClient(i.config).QueryPosts(i)
}

// Update returns a builder for updating this Influencer.
// Note that you need to call Influencer.Unwrap() before calling this method if this Influencer
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Influencer) Update() *InfluencerUpdateOne {
	return NewInfluencerClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Influencer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Influencer) Unwrap() *Influencer {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Influencer is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Influencer) String() string {
	var builder strings.Builder
	builder.WriteString("Influencer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(i.Platform)
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(i.AccountID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(i.Status)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Influencers is a parsable slice of Influencer.
type Influencers []*Influencer
