// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/WuPinYi/SocialForge/internal/ent/influencer"
	"github.com/WuPinYi/SocialForge/internal/ent/post"
	"github.com/WuPinYi/SocialForge/internal/ent/predicate"
	"github.com/WuPinYi/SocialForge/internal/ent/user"
)

// InfluencerUpdate is the builder for updating Influencer entities.
type InfluencerUpdate struct {
	config
	hooks    []Hook
	mutation *InfluencerMutation
}

// Where appends a list predicates to the InfluencerUpdate builder.
func (iu *InfluencerUpdate) Where(ps ...predicate.Influencer) *InfluencerUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *InfluencerUpdate) SetName(s string) *InfluencerUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *InfluencerUpdate) SetNillableName(s *string) *InfluencerUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetPlatform sets the "platform" field.
func (iu *InfluencerUpdate) SetPlatform(s string) *InfluencerUpdate {
	iu.mutation.SetPlatform(s)
	return iu
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (iu *InfluencerUpdate) SetNillablePlatform(s *string) *InfluencerUpdate {
	if s != nil {
		iu.SetPlatform(*s)
	}
	return iu
}

// SetAccountID sets the "account_id" field.
func (iu *InfluencerUpdate) SetAccountID(s string) *InfluencerUpdate {
	iu.mutation.SetAccountID(s)
	return iu
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (iu *InfluencerUpdate) SetNillableAccountID(s *string) *InfluencerUpdate {
	if s != nil {
		iu.SetAccountID(*s)
	}
	return iu
}

// SetStatus sets the "status" field.
func (iu *InfluencerUpdate) SetStatus(s string) *InfluencerUpdate {
	iu.mutation.SetStatus(s)
	return iu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iu *InfluencerUpdate) SetNillableStatus(s *string) *InfluencerUpdate {
	if s != nil {
		iu.SetStatus(*s)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InfluencerUpdate) SetUpdatedAt(t time.Time) *InfluencerUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iu *InfluencerUpdate) SetOwnerID(id string) *InfluencerUpdate {
	iu.mutation.SetOwnerID(id)
	return iu
}

// SetOwner sets the "owner" edge to the User entity.
func (iu *InfluencerUpdate) SetOwner(u *User) *InfluencerUpdate {
	return iu.SetOwnerID(u.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (iu *InfluencerUpdate) AddPostIDs(ids ...string) *InfluencerUpdate {
	iu.mutation.AddPostIDs(ids...)
	return iu
}

// AddPosts adds the "posts" edges to the Post entity.
func (iu *InfluencerUpdate) AddPosts(p ...*Post) *InfluencerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.AddPostIDs(ids...)
}

// Mutation returns the InfluencerMutation object of the builder.
func (iu *InfluencerUpdate) Mutation() *InfluencerMutation {
	return iu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iu *InfluencerUpdate) ClearOwner() *InfluencerUpdate {
	iu.mutation.ClearOwner()
	return iu
}

// ClearPosts clears all "posts" edges to the Post entity.
func (iu *InfluencerUpdate) ClearPosts() *InfluencerUpdate {
	iu.mutation.ClearPosts()
	return iu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (iu *InfluencerUpdate) RemovePostIDs(ids ...string) *InfluencerUpdate {
	iu.mutation.RemovePostIDs(ids...)
	return iu
}

// RemovePosts removes "posts" edges to Post entities.
func (iu *InfluencerUpdate) RemovePosts(p ...*Post) *InfluencerUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InfluencerUpdate) Save(ctx context.Context) (int, error) {
	iu.defaults()
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InfluencerUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InfluencerUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InfluencerUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *InfluencerUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := influencer.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *InfluencerUpdate) check() error {
	if iu.mutation.OwnerCleared() && len(iu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Influencer.owner"`)
	}
	return nil
}

func (iu *InfluencerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(influencer.Table, influencer.Columns, sqlgraph.NewFieldSpec(influencer.FieldID, field.TypeString))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(influencer.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Platform(); ok {
		_spec.SetField(influencer.FieldPlatform, field.TypeString, value)
	}
	if value, ok := iu.mutation.AccountID(); ok {
		_spec.SetField(influencer.FieldAccountID, field.TypeString, value)
	}
	if value, ok := iu.mutation.Status(); ok {
		_spec.SetField(influencer.FieldStatus, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(influencer.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   influencer.OwnerTable,
			Columns: []string{influencer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   influencer.OwnerTable,
			Columns: []string{influencer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !iu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{influencer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// InfluencerUpdateOne is the builder for updating a single Influencer entity.
type InfluencerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InfluencerMutation
}

// SetName sets the "name" field.
func (iuo *InfluencerUpdateOne) SetName(s string) *InfluencerUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *InfluencerUpdateOne) SetNillableName(s *string) *InfluencerUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetPlatform sets the "platform" field.
func (iuo *InfluencerUpdateOne) SetPlatform(s string) *InfluencerUpdateOne {
	iuo.mutation.SetPlatform(s)
	return iuo
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (iuo *InfluencerUpdateOne) SetNillablePlatform(s *string) *InfluencerUpdateOne {
	if s != nil {
		iuo.SetPlatform(*s)
	}
	return iuo
}

// SetAccountID sets the "account_id" field.
func (iuo *InfluencerUpdateOne) SetAccountID(s string) *InfluencerUpdateOne {
	iuo.mutation.SetAccountID(s)
	return iuo
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (iuo *InfluencerUpdateOne) SetNillableAccountID(s *string) *InfluencerUpdateOne {
	if s != nil {
		iuo.SetAccountID(*s)
	}
	return iuo
}

// SetStatus sets the "status" field.
func (iuo *InfluencerUpdateOne) SetStatus(s string) *InfluencerUpdateOne {
	iuo.mutation.SetStatus(s)
	return iuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iuo *InfluencerUpdateOne) SetNillableStatus(s *string) *InfluencerUpdateOne {
	if s != nil {
		iuo.SetStatus(*s)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InfluencerUpdateOne) SetUpdatedAt(t time.Time) *InfluencerUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (iuo *InfluencerUpdateOne) SetOwnerID(id string) *InfluencerUpdateOne {
	iuo.mutation.SetOwnerID(id)
	return iuo
}

// SetOwner sets the "owner" edge to the User entity.
func (iuo *InfluencerUpdateOne) SetOwner(u *User) *InfluencerUpdateOne {
	return iuo.SetOwnerID(u.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (iuo *InfluencerUpdateOne) AddPostIDs(ids ...string) *InfluencerUpdateOne {
	iuo.mutation.AddPostIDs(ids...)
	return iuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (iuo *InfluencerUpdateOne) AddPosts(p ...*Post) *InfluencerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.AddPostIDs(ids...)
}

// Mutation returns the InfluencerMutation object of the builder.
func (iuo *InfluencerUpdateOne) Mutation() *InfluencerMutation {
	return iuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (iuo *InfluencerUpdateOne) ClearOwner() *InfluencerUpdateOne {
	iuo.mutation.ClearOwner()
	return iuo
}

// ClearPosts clears all "posts" edges to the Post entity.
func (iuo *InfluencerUpdateOne) ClearPosts() *InfluencerUpdateOne {
	iuo.mutation.ClearPosts()
	return iuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (iuo *InfluencerUpdateOne) RemovePostIDs(ids ...string) *InfluencerUpdateOne {
	iuo.mutation.RemovePostIDs(ids...)
	return iuo
}

// RemovePosts removes "posts" edges to Post entities.
func (iuo *InfluencerUpdateOne) RemovePosts(p ...*Post) *InfluencerUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return iuo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the InfluencerUpdate builder.
func (iuo *InfluencerUpdateOne) Where(ps ...predicate.Influencer) *InfluencerUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InfluencerUpdateOne) Select(field string, fields ...string) *InfluencerUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Influencer entity.
func (iuo *InfluencerUpdateOne) Save(ctx context.Context) (*Influencer, error) {
	iuo.defaults()
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InfluencerUpdateOne) SaveX(ctx context.Context) *Influencer {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InfluencerUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InfluencerUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *InfluencerUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := influencer.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *InfluencerUpdateOne) check() error {
	if iuo.mutation.OwnerCleared() && len(iuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Influencer.owner"`)
	}
	return nil
}

func (iuo *InfluencerUpdateOne) sqlSave(ctx context.Context) (_node *Influencer, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(influencer.Table, influencer.Columns, sqlgraph.NewFieldSpec(influencer.FieldID, field.TypeString))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Influencer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, influencer.FieldID)
		for _, f := range fields {
			if !influencer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != influencer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(influencer.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Platform(); ok {
		_spec.SetField(influencer.FieldPlatform, field.TypeString, value)
	}
	if value, ok := iuo.mutation.AccountID(); ok {
		_spec.SetField(influencer.FieldAccountID, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Status(); ok {
		_spec.SetField(influencer.FieldStatus, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(influencer.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   influencer.OwnerTable,
			Columns: []string{influencer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   influencer.OwnerTable,
			Columns: []string{influencer.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !iuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   influencer.PostsTable,
			Columns: []string{influencer.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Influencer{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{influencer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
