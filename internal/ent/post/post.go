// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the post type in the database.
	Label = "post"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInfluencerID holds the string denoting the influencer_id field in the database.
	FieldInfluencerID = "influencer_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldScheduledTime holds the string denoting the scheduled_time field in the database.
	FieldScheduledTime = "scheduled_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeInfluencer holds the string denoting the influencer edge name in mutations.
	EdgeInfluencer = "influencer"
	// Table holds the table name of the post in the database.
	Table = "posts"
	// InfluencerTable is the table that holds the influencer relation/edge.
	InfluencerTable = "posts"
	// InfluencerInverseTable is the table name for the Influencer entity.
	// It exists in this package in order to avoid circular dependency with the "influencer" package.
	InfluencerInverseTable = "influencers"
	// InfluencerColumn is the table column denoting the influencer relation/edge.
	InfluencerColumn = "influencer_id"
)

// Columns holds all SQL columns for post fields.
var Columns = []string{
	FieldID,
	FieldInfluencerID,
	FieldContent,
	FieldScheduledTime,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Post queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInfluencerID orders the results by the influencer_id field.
func ByInfluencerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInfluencerID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByScheduledTime orders the results by the scheduled_time field.
func ByScheduledTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduledTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByInfluencerField orders the results by influencer field.
func ByInfluencerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInfluencerStep(), sql.OrderByField(field, opts...))
	}
}
func newInfluencerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InfluencerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InfluencerTable, InfluencerColumn),
	)
}
