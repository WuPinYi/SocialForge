// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/WuPinYi/SocialForge/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldID, id))
}

// InfluencerID applies equality check predicate on the "influencer_id" field. It's identical to InfluencerIDEQ.
func InfluencerID(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldInfluencerID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldContent, v))
}

// ScheduledTime applies equality check predicate on the "scheduled_time" field. It's identical to ScheduledTimeEQ.
func ScheduledTime(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldScheduledTime, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// InfluencerIDEQ applies the EQ predicate on the "influencer_id" field.
func InfluencerIDEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldInfluencerID, v))
}

// InfluencerIDNEQ applies the NEQ predicate on the "influencer_id" field.
func InfluencerIDNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldInfluencerID, v))
}

// InfluencerIDIn applies the In predicate on the "influencer_id" field.
func InfluencerIDIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldInfluencerID, vs...))
}

// InfluencerIDNotIn applies the NotIn predicate on the "influencer_id" field.
func InfluencerIDNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldInfluencerID, vs...))
}

// InfluencerIDGT applies the GT predicate on the "influencer_id" field.
func InfluencerIDGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldInfluencerID, v))
}

// InfluencerIDGTE applies the GTE predicate on the "influencer_id" field.
func InfluencerIDGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldInfluencerID, v))
}

// InfluencerIDLT applies the LT predicate on the "influencer_id" field.
func InfluencerIDLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldInfluencerID, v))
}

// InfluencerIDLTE applies the LTE predicate on the "influencer_id" field.
func InfluencerIDLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldInfluencerID, v))
}

// InfluencerIDContains applies the Contains predicate on the "influencer_id" field.
func InfluencerIDContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldInfluencerID, v))
}

// InfluencerIDHasPrefix applies the HasPrefix predicate on the "influencer_id" field.
func InfluencerIDHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldInfluencerID, v))
}

// InfluencerIDHasSuffix applies the HasSuffix predicate on the "influencer_id" field.
func InfluencerIDHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldInfluencerID, v))
}

// InfluencerIDEqualFold applies the EqualFold predicate on the "influencer_id" field.
func InfluencerIDEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldInfluencerID, v))
}

// InfluencerIDContainsFold applies the ContainsFold predicate on the "influencer_id" field.
func InfluencerIDContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldInfluencerID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldContent, v))
}

// ScheduledTimeEQ applies the EQ predicate on the "scheduled_time" field.
func ScheduledTimeEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldScheduledTime, v))
}

// ScheduledTimeNEQ applies the NEQ predicate on the "scheduled_time" field.
func ScheduledTimeNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldScheduledTime, v))
}

// ScheduledTimeIn applies the In predicate on the "scheduled_time" field.
func ScheduledTimeIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldScheduledTime, vs...))
}

// ScheduledTimeNotIn applies the NotIn predicate on the "scheduled_time" field.
func ScheduledTimeNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldScheduledTime, vs...))
}

// ScheduledTimeGT applies the GT predicate on the "scheduled_time" field.
func ScheduledTimeGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldScheduledTime, v))
}

// ScheduledTimeGTE applies the GTE predicate on the "scheduled_time" field.
func ScheduledTimeGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldScheduledTime, v))
}

// ScheduledTimeLT applies the LT predicate on the "scheduled_time" field.
func ScheduledTimeLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldScheduledTime, v))
}

// ScheduledTimeLTE applies the LTE predicate on the "scheduled_time" field.
func ScheduledTimeLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldScheduledTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasInfluencer applies the HasEdge predicate on the "influencer" edge.
func HasInfluencer() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InfluencerTable, InfluencerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInfluencerWith applies the HasEdge predicate on the "influencer" edge with a given conditions (other predicates).
func HasInfluencerWith(preds ...predicate.Influencer) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newInfluencerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
