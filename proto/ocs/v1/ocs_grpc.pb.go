// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/ocs.proto

package ocsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OpinionControlService_CreateInfluencer_FullMethodName = "/ocs.v1.OpinionControlService/CreateInfluencer"
	OpinionControlService_GetInfluencer_FullMethodName    = "/ocs.v1.OpinionControlService/GetInfluencer"
	OpinionControlService_ListInfluencers_FullMethodName  = "/ocs.v1.OpinionControlService/ListInfluencers"
	OpinionControlService_SchedulePost_FullMethodName     = "/ocs.v1.OpinionControlService/SchedulePost"
	OpinionControlService_GetPost_FullMethodName          = "/ocs.v1.OpinionControlService/GetPost"
	OpinionControlService_ListPosts_FullMethodName        = "/ocs.v1.OpinionControlService/ListPosts"
)

// OpinionControlServiceClient is the client API for OpinionControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OpinionControlService defines the gRPC service for managing influencers and posts
type OpinionControlServiceClient interface {
	// Influencer Management
	CreateInfluencer(ctx context.Context, in *CreateInfluencerRequest, opts ...grpc.CallOption) (*CreateInfluencerResponse, error)
	GetInfluencer(ctx context.Context, in *GetInfluencerRequest, opts ...grpc.CallOption) (*GetInfluencerResponse, error)
	ListInfluencers(ctx context.Context, in *ListInfluencersRequest, opts ...grpc.CallOption) (*ListInfluencersResponse, error)
	// Post Management
	SchedulePost(ctx context.Context, in *SchedulePostRequest, opts ...grpc.CallOption) (*SchedulePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error)
}

type opinionControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpinionControlServiceClient(cc grpc.ClientConnInterface) OpinionControlServiceClient {
	return &opinionControlServiceClient{cc}
}

func (c *opinionControlServiceClient) CreateInfluencer(ctx context.Context, in *CreateInfluencerRequest, opts ...grpc.CallOption) (*CreateInfluencerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInfluencerResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_CreateInfluencer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionControlServiceClient) GetInfluencer(ctx context.Context, in *GetInfluencerRequest, opts ...grpc.CallOption) (*GetInfluencerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfluencerResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_GetInfluencer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionControlServiceClient) ListInfluencers(ctx context.Context, in *ListInfluencersRequest, opts ...grpc.CallOption) (*ListInfluencersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInfluencersResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_ListInfluencers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionControlServiceClient) SchedulePost(ctx context.Context, in *SchedulePostRequest, opts ...grpc.CallOption) (*SchedulePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchedulePostResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_SchedulePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionControlServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_GetPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opinionControlServiceClient) ListPosts(ctx context.Context, in *ListPostsRequest, opts ...grpc.CallOption) (*ListPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPostsResponse)
	err := c.cc.Invoke(ctx, OpinionControlService_ListPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpinionControlServiceServer is the server API for OpinionControlService service.
// All implementations must embed UnimplementedOpinionControlServiceServer
// for forward compatibility.
//
// OpinionControlService defines the gRPC service for managing influencers and posts
type OpinionControlServiceServer interface {
	// Influencer Management
	CreateInfluencer(context.Context, *CreateInfluencerRequest) (*CreateInfluencerResponse, error)
	GetInfluencer(context.Context, *GetInfluencerRequest) (*GetInfluencerResponse, error)
	ListInfluencers(context.Context, *ListInfluencersRequest) (*ListInfluencersResponse, error)
	// Post Management
	SchedulePost(context.Context, *SchedulePostRequest) (*SchedulePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error)
	mustEmbedUnimplementedOpinionControlServiceServer()
}

// UnimplementedOpinionControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpinionControlServiceServer struct{}

func (UnimplementedOpinionControlServiceServer) CreateInfluencer(context.Context, *CreateInfluencerRequest) (*CreateInfluencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfluencer not implemented")
}
func (UnimplementedOpinionControlServiceServer) GetInfluencer(context.Context, *GetInfluencerRequest) (*GetInfluencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfluencer not implemented")
}
func (UnimplementedOpinionControlServiceServer) ListInfluencers(context.Context, *ListInfluencersRequest) (*ListInfluencersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfluencers not implemented")
}
func (UnimplementedOpinionControlServiceServer) SchedulePost(context.Context, *SchedulePostRequest) (*SchedulePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePost not implemented")
}
func (UnimplementedOpinionControlServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedOpinionControlServiceServer) ListPosts(context.Context, *ListPostsRequest) (*ListPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedOpinionControlServiceServer) mustEmbedUnimplementedOpinionControlServiceServer() {}
func (UnimplementedOpinionControlServiceServer) testEmbeddedByValue()                               {}

// UnsafeOpinionControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpinionControlServiceServer will
// result in compilation errors.
type UnsafeOpinionControlServiceServer interface {
	mustEmbedUnimplementedOpinionControlServiceServer()
}

func RegisterOpinionControlServiceServer(s grpc.ServiceRegistrar, srv OpinionControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpinionControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpinionControlService_ServiceDesc, srv)
}

func _OpinionControlService_CreateInfluencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfluencerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).CreateInfluencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_CreateInfluencer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).CreateInfluencer(ctx, req.(*CreateInfluencerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionControlService_GetInfluencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfluencerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).GetInfluencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_GetInfluencer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).GetInfluencer(ctx, req.(*GetInfluencerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionControlService_ListInfluencers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfluencersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).ListInfluencers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_ListInfluencers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).ListInfluencers(ctx, req.(*ListInfluencersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionControlService_SchedulePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).SchedulePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_SchedulePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).SchedulePost(ctx, req.(*SchedulePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionControlService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpinionControlService_ListPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpinionControlServiceServer).ListPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpinionControlService_ListPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpinionControlServiceServer).ListPosts(ctx, req.(*ListPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpinionControlService_ServiceDesc is the grpc.ServiceDesc for OpinionControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpinionControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocs.v1.OpinionControlService",
	HandlerType: (*OpinionControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInfluencer",
			Handler:    _OpinionControlService_CreateInfluencer_Handler,
		},
		{
			MethodName: "GetInfluencer",
			Handler:    _OpinionControlService_GetInfluencer_Handler,
		},
		{
			MethodName: "ListInfluencers",
			Handler:    _OpinionControlService_ListInfluencers_Handler,
		},
		{
			MethodName: "SchedulePost",
			Handler:    _OpinionControlService_SchedulePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _OpinionControlService_GetPost_Handler,
		},
		{
			MethodName: "ListPosts",
			Handler:    _OpinionControlService_ListPosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ocs.proto",
}
